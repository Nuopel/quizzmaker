"""
Module de g√©n√©ration et gestion de questions pour les quiz.

Ce module permet de cr√©er, valider et sauvegarder des questions
dans une base de donn√©es CSV.
"""

import pandas as pd
from typing import List, Dict, Any, Optional
from pathlib import Path

from quizzmaker.models import Question


class QuestionGenerator:
    """
    G√©n√©rateur et gestionnaire de base de donn√©es de questions.
    
    Cette classe permet de cr√©er des questions de diff√©rents types,
    de les valider, et de les sauvegarder dans un fichier CSV.
    
    Attributs:
        questions (List[Question]): Liste des questions cr√©√©es
    """
    
    def __init__(self):
        """Initialise un g√©n√©rateur vide."""
        self.questions: List[Question] = []
    
    def add_multiple_choice_question(
        self,
        id: int,
        section: str,
        section_title: str,
        difficulty: str,
        question: str,
        options: List[str],
        answer: str,
        explanation: str
    ) -> None:
        """
        Ajoute une question √† choix multiple.
        
        Args:
            id (int): Identifiant unique de la question
            section (str): Num√©ro de section (ex: "1.1")
            section_title (str): Titre de la section
            difficulty (str): "Easy", "Medium", ou "Hard"
            question (str): Texte de la question
            options (List[str]): Liste des options de r√©ponse (2-4 options)
            answer (str): R√©ponse correcte (doit √™tre dans options)
            explanation (str): Explication de la r√©ponse
            
        Raises:
            ValueError: Si la r√©ponse n'est pas dans les options
            ValueError: Si la question n'est pas valide
            
        Example:
            >>> gen = QuestionGenerator()
            >>> gen.add_multiple_choice_question(
            ...     id=1,
            ...     section="1.1",
            ...     section_title="Introduction",
            ...     difficulty="Easy",
            ...     question="Quelle est la capitale de la France?",
            ...     options=["Paris", "Londres", "Berlin", "Rome"],
            ...     answer="Paris",
            ...     explanation="Paris est la capitale de la France depuis 987."
            ... )
        """
        q = Question(
            id=id,
            section=section,
            section_title=section_title,
            difficulty=difficulty,
            type='Multiple Choice',
            question=question,
            options=options,
            answer=answer,
            explanation=explanation
        )
        
        is_valid, error = q.is_valid()
        if not is_valid:
            raise ValueError(f"Question invalide: {error}")
        
        self.questions.append(q)
    
    def add_true_false_question(
        self,
        id: int,
        section: str,
        section_title: str,
        difficulty: str,
        question: str,
        answer: str,
        explanation: str
    ) -> None:
        """
        Ajoute une question Vrai/Faux.
        
        Args:
            id (int): Identifiant unique de la question
            section (str): Num√©ro de section (ex: "1.1")
            section_title (str): Titre de la section
            difficulty (str): "Easy", "Medium", ou "Hard"
            question (str): Texte de la question
            answer (str): "True" ou "False"
            explanation (str): Explication de la r√©ponse
            
        Raises:
            ValueError: Si la r√©ponse n'est pas "True" ou "False"
            ValueError: Si la question n'est pas valide
            
        Example:
            >>> gen = QuestionGenerator()
            >>> gen.add_true_false_question(
            ...     id=1,
            ...     section="1.1",
            ...     section_title="Faits",
            ...     difficulty="Easy",
            ...     question="La Terre est ronde.",
            ...     answer="True",
            ...     explanation="La Terre est approximativement sph√©rique."
            ... )
        """
        q = Question(
            id=id,
            section=section,
            section_title=section_title,
            difficulty=difficulty,
            type='True/False',
            question=question,
            options=['True', 'False'],
            answer=answer,
            explanation=explanation
        )
        
        is_valid, error = q.is_valid()
        if not is_valid:
            raise ValueError(f"Question invalide: {error}")
        
        self.questions.append(q)
    
    def add_short_answer_question(
        self,
        id: int,
        section: str,
        section_title: str,
        difficulty: str,
        question: str,
        answer: str,
        explanation: str
    ) -> None:
        """
        Ajoute une question √† r√©ponse courte (auto-√©valuation).
        
        Args:
            id (int): Identifiant unique de la question
            section (str): Num√©ro de section (ex: "1.1")
            section_title (str): Titre de la section
            difficulty (str): "Easy", "Medium", ou "Hard"
            question (str): Texte de la question
            answer (str): R√©ponse attendue
            explanation (str): Explication de la r√©ponse
            
        Example:
            >>> gen = QuestionGenerator()
            >>> gen.add_short_answer_question(
            ...     id=1,
            ...     section="1.1",
            ...     section_title="Concepts",
            ...     difficulty="Medium",
            ...     question="Expliquez le principe de s√©paration des responsabilit√©s.",
            ...     answer="Chaque module doit avoir une seule responsabilit√© bien d√©finie.",
            ...     explanation="Ce principe facilite la maintenance et les tests."
            ... )
        """
        q = Question(
            id=id,
            section=section,
            section_title=section_title,
            difficulty=difficulty,
            type='Short Answer',
            question=question,
            options=[],
            answer=answer,
            explanation=explanation
        )
        
        is_valid, error = q.is_valid()
        if not is_valid:
            raise ValueError(f"Question invalide: {error}")
        
        self.questions.append(q)
    
    def load_from_csv(self, filename: str) -> bool:
        """
        Charge des questions depuis un fichier CSV.
        
        Args:
            filename (str): Chemin du fichier CSV
            
        Returns:
            bool: True si le chargement a r√©ussi
            
        Raises:
            FileNotFoundError: Si le fichier n'existe pas
            ValueError: Si le format CSV est invalide
        """
        try:
            df = pd.read_csv(filename)
            self.questions = []
            
            for _, row in df.iterrows():
                q = Question.from_dict(row.to_dict())
                is_valid, error = q.is_valid()
                if not is_valid:
                    print(f"‚ö†Ô∏è  Question {q.id} invalide: {error}")
                    continue
                self.questions.append(q)
            
            print(f"‚úÖ Charg√© {len(self.questions)} questions depuis {filename}")
            return True
            
        except FileNotFoundError:
            print(f"‚ùå Fichier non trouv√©: {filename}")
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement: {e}")
            return False
    
    def save_to_csv(self, filename: str) -> bool:
        """
        Sauvegarde les questions dans un fichier CSV.
        
        Args:
            filename (str): Chemin du fichier CSV de destination
            
        Returns:
            bool: True si la sauvegarde a r√©ussi
        """
        if not self.questions:
            print("‚ùå Aucune question √† sauvegarder")
            return False
        
        try:
            data = [q.to_dict() for q in self.questions]
            df = pd.DataFrame(data)
            df.to_csv(filename, index=False)
            print(f"‚úÖ Sauvegard√© {len(self.questions)} questions dans {filename}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """
        Calcule les statistiques de la base de questions.
        
        Returns:
            dict: Statistiques (total, par difficult√©, par type, par section)
            
        Example:
            >>> gen = QuestionGenerator()
            >>> # ... ajouter des questions ...
            >>> stats = gen.get_stats()
            >>> print(f"Total: {stats['total']}")
        """
        if not self.questions:
            return {"total": 0}
        
        df = pd.DataFrame([q.to_dict() for q in self.questions])
        return {
            "total": len(self.questions),
            "by_difficulty": df['difficulty'].value_counts().to_dict(),
            "by_type": df['type'].value_counts().to_dict(),
            "by_section": df['section'].value_counts().to_dict()
        }
    
    def clear(self) -> None:
        """Efface toutes les questions de la m√©moire."""
        self.questions.clear()
        print("üóëÔ∏è  Toutes les questions ont √©t√© effac√©es")
    
    def preview(self, num_questions: int = 3) -> None:
        """
        Affiche un aper√ßu des premi√®res questions.
        
        Args:
            num_questions (int): Nombre de questions √† afficher (d√©faut: 3)
        """
        if not self.questions:
            print("‚ùå Aucune question √† pr√©visualiser")
            return
        
        for i, q in enumerate(self.questions[:num_questions], 1):
            print(f"\n{'='*60}")
            print(f"Question {i}/{min(num_questions, len(self.questions))}")
            print(f"{'='*60}")
            print(f"ID: {q.id} | Section: {q.section} - {q.section_title}")
            print(f"Difficult√©: {q.difficulty} | Type: {q.type}")
            print(f"\nQ: {q.question}")
            
            if q.type == 'Multiple Choice':
                print("\nOptions:")
                for opt in q.options:
                    print(f"  ‚Ä¢ {opt}")
            elif q.type == 'True/False':
                print("\nOptions: True / False")
            
            print(f"\n‚úì R√©ponse: {q.answer}")
            print(f"üí° {q.explanation}")
    
    def validate_all(self) -> tuple[int, List[str]]:
        """
        Valide toutes les questions charg√©es.
        
        Returns:
            tuple[int, List[str]]: (nombre_invalides, liste_erreurs)
        """
        errors = []
        for q in self.questions:
            is_valid, error = q.is_valid()
            if not is_valid:
                errors.append(f"Question {q.id}: {error}")
        
        return len(errors), errors
    
    def get_question_by_id(self, question_id: int) -> Optional[Question]:
        """
        R√©cup√®re une question par son ID.
        
        Args:
            question_id (int): ID de la question recherch√©e
            
        Returns:
            Optional[Question]: La question si trouv√©e, None sinon
        """
        for q in self.questions:
            if q.id == question_id:
                return q
        return None
    
    def remove_question(self, question_id: int) -> bool:
        """
        Supprime une question par son ID.
        
        Args:
            question_id (int): ID de la question √† supprimer
            
        Returns:
            bool: True si la question a √©t√© supprim√©e
        """
        for i, q in enumerate(self.questions):
            if q.id == question_id:
                self.questions.pop(i)
                print(f"‚úÖ Question {question_id} supprim√©e")
                return True
        print(f"‚ùå Question {question_id} non trouv√©e")
        return False
